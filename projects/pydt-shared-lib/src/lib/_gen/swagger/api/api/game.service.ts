/**
 * serverless-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CanCreateGameRequestBody } from '../model/canCreateGameRequestBody';
import { CanCreateGameResponseBody } from '../model/canCreateGameResponseBody';
import { ChangeCivRequestBody } from '../model/changeCivRequestBody';
import { CreateGameRequestBody } from '../model/createGameRequestBody';
import { ErrorResponse } from '../model/errorResponse';
import { Game } from '../model/game';
import { GameRequestBody } from '../model/gameRequestBody';
import { GameTurnListItem } from '../model/gameTurnListItem';
import { GameTurnResponse } from '../model/gameTurnResponse';
import { JoinGameRequestBody } from '../model/joinGameRequestBody';
import { LeaveRequestBody } from '../model/leaveRequestBody';
import { OpenGamesResponse } from '../model/openGamesResponse';
import { OpenSlotsGame } from '../model/openSlotsGame';
import { RawCiv6Mods } from '../model/rawCiv6Mods';
import { ReplacePlayerRequestBody } from '../model/replacePlayerRequestBody';
import { ReplaceRequestedSubstitutionPlayerRequestBody } from '../model/replaceRequestedSubstitutionPlayerRequestBody';
import { RequestSubstitutionBody } from '../model/requestSubstitutionBody';
import { StartTurnSubmitResponse } from '../model/startTurnSubmitResponse';
import { SurrenderBody } from '../model/surrenderBody';
import { UpdateTurnOrderRequestBody } from '../model/updateTurnOrderRequestBody';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GameService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling _delete.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/delete`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCiv6Mod(gameId: string, body: RawCiv6Mods, observe?: 'body', reportProgress?: boolean): Observable<Array<RawCiv6Mods>>;
    public addCiv6Mod(gameId: string, body: RawCiv6Mods, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RawCiv6Mods>>>;
    public addCiv6Mod(gameId: string, body: RawCiv6Mods, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RawCiv6Mods>>>;
    public addCiv6Mod(gameId: string, body: RawCiv6Mods, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling addCiv6Mod.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addCiv6Mod.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<RawCiv6Mods>>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/civ6Mods`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canCreate(body: CanCreateGameRequestBody, observe?: 'body', reportProgress?: boolean): Observable<CanCreateGameResponseBody>;
    public canCreate(body: CanCreateGameRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CanCreateGameResponseBody>>;
    public canCreate(body: CanCreateGameRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CanCreateGameResponseBody>>;
    public canCreate(body: CanCreateGameRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CanCreateGameResponseBody>(`${this.basePath}/game/canCreate`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeCiv(gameId: string, body: ChangeCivRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public changeCiv(gameId: string, body: ChangeCivRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public changeCiv(gameId: string, body: ChangeCivRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public changeCiv(gameId: string, body: ChangeCivRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling changeCiv.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling changeCiv.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/changeCiv`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clone(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public clone(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public clone(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public clone(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling clone.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/clone`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create(body: CreateGameRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public create(body: CreateGameRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public create(body: CreateGameRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public create(body: CreateGameRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/create`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param modId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCiv6Mod(gameId: string, modId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RawCiv6Mods>>;
    public deleteCiv6Mod(gameId: string, modId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RawCiv6Mods>>>;
    public deleteCiv6Mod(gameId: string, modId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RawCiv6Mods>>>;
    public deleteCiv6Mod(gameId: string, modId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling deleteCiv6Mod.');
        }

        if (modId === null || modId === undefined) {
            throw new Error('Required parameter modId was null or undefined when calling deleteCiv6Mod.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Array<RawCiv6Mods>>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/civ6Mods/${encodeURIComponent(String(modId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public edit(gameId: string, body: GameRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public edit(gameId: string, body: GameRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public edit(gameId: string, body: GameRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public edit(gameId: string, body: GameRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling edit.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling edit.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/edit`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public finishSubmit(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public finishSubmit(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public finishSubmit(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public finishSubmit(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling finishSubmit.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/finishSubmit`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public get(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public get(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public get(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling get.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCiv6Mods(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RawCiv6Mods>>;
    public getCiv6Mods(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RawCiv6Mods>>>;
    public getCiv6Mods(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RawCiv6Mods>>>;
    public getCiv6Mods(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling getCiv6Mods.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<RawCiv6Mods>>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/civ6Mods`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param compressed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTurn(gameId: string, compressed?: string, observe?: 'body', reportProgress?: boolean): Observable<GameTurnResponse>;
    public getTurn(gameId: string, compressed?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GameTurnResponse>>;
    public getTurn(gameId: string, compressed?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GameTurnResponse>>;
    public getTurn(gameId: string, compressed?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling getTurn.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (compressed !== undefined && compressed !== null) {
            queryParameters = queryParameters.set('compressed', <any>compressed);
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GameTurnResponse>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param turn 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTurnById(gameId: string, turn: number, observe?: 'body', reportProgress?: boolean): Observable<GameTurnResponse>;
    public getTurnById(gameId: string, turn: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GameTurnResponse>>;
    public getTurnById(gameId: string, turn: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GameTurnResponse>>;
    public getTurnById(gameId: string, turn: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling getTurnById.');
        }

        if (turn === null || turn === undefined) {
            throw new Error('Required parameter turn was null or undefined when calling getTurnById.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GameTurnResponse>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/${encodeURIComponent(String(turn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param startTurn 
     * @param endTurn 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTurns(gameId: string, startTurn: number, endTurn: number, observe?: 'body', reportProgress?: boolean): Observable<Array<GameTurnListItem>>;
    public getTurns(gameId: string, startTurn: number, endTurn: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GameTurnListItem>>>;
    public getTurns(gameId: string, startTurn: number, endTurn: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GameTurnListItem>>>;
    public getTurns(gameId: string, startTurn: number, endTurn: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling getTurns.');
        }

        if (startTurn === null || startTurn === undefined) {
            throw new Error('Required parameter startTurn was null or undefined when calling getTurns.');
        }

        if (endTurn === null || endTurn === undefined) {
            throw new Error('Required parameter endTurn was null or undefined when calling getTurns.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GameTurnListItem>>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turns/${encodeURIComponent(String(startTurn))}/${encodeURIComponent(String(endTurn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public join(gameId: string, body: JoinGameRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public join(gameId: string, body: JoinGameRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public join(gameId: string, body: JoinGameRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public join(gameId: string, body: JoinGameRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling join.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling join.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/join`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public leave(gameId: string, body: LeaveRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public leave(gameId: string, body: LeaveRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public leave(gameId: string, body: LeaveRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public leave(gameId: string, body: LeaveRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling leave.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling leave.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/leave`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOpen(observe?: 'body', reportProgress?: boolean): Observable<OpenGamesResponse>;
    public listOpen(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OpenGamesResponse>>;
    public listOpen(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OpenGamesResponse>>;
    public listOpen(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<OpenGamesResponse>(`${this.basePath}/game/listOpen`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notStarted(observe?: 'body', reportProgress?: boolean): Observable<Array<Game>>;
    public notStarted(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Game>>>;
    public notStarted(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Game>>>;
    public notStarted(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Game>>(`${this.basePath}/game/notStarted`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public openSlots(observe?: 'body', reportProgress?: boolean): Observable<Array<OpenSlotsGame>>;
    public openSlots(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OpenSlotsGame>>>;
    public openSlots(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OpenSlotsGame>>>;
    public openSlots(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<OpenSlotsGame>>(`${this.basePath}/game/openSlots`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refreshSave(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public refreshSave(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public refreshSave(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public refreshSave(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling refreshSave.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/refreshState`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replacePlayer(gameId: string, body: ReplacePlayerRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public replacePlayer(gameId: string, body: ReplacePlayerRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public replacePlayer(gameId: string, body: ReplacePlayerRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public replacePlayer(gameId: string, body: ReplacePlayerRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling replacePlayer.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePlayer.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/replacePlayer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceRequestedSubstitutionPlayer(gameId: string, body: ReplaceRequestedSubstitutionPlayerRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public replaceRequestedSubstitutionPlayer(gameId: string, body: ReplaceRequestedSubstitutionPlayerRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public replaceRequestedSubstitutionPlayer(gameId: string, body: ReplaceRequestedSubstitutionPlayerRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public replaceRequestedSubstitutionPlayer(gameId: string, body: ReplaceRequestedSubstitutionPlayerRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling replaceRequestedSubstitutionPlayer.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceRequestedSubstitutionPlayer.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/replaceRequestedSubstitutionPlayer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestSubstitution(gameId: string, body: RequestSubstitutionBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public requestSubstitution(gameId: string, body: RequestSubstitutionBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public requestSubstitution(gameId: string, body: RequestSubstitutionBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public requestSubstitution(gameId: string, body: RequestSubstitutionBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling requestSubstitution.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling requestSubstitution.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/requestSubstitution`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetGameStateOnNextUpload(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public resetGameStateOnNextUpload(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public resetGameStateOnNextUpload(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public resetGameStateOnNextUpload(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling resetGameStateOnNextUpload.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/resetGameStateOnNextUpload`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public restart(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public restart(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public restart(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public restart(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling restart.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/restart`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revert(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public revert(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public revert(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public revert(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling revert.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/revert`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public start(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public start(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public start(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public start(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling start.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/start`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startSubmit(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<StartTurnSubmitResponse>;
    public startSubmit(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartTurnSubmitResponse>>;
    public startSubmit(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartTurnSubmitResponse>>;
    public startSubmit(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling startSubmit.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<StartTurnSubmitResponse>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/turn/startSubmit`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public surrender(gameId: string, body: SurrenderBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public surrender(gameId: string, body: SurrenderBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public surrender(gameId: string, body: SurrenderBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public surrender(gameId: string, body: SurrenderBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling surrender.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling surrender.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/surrender`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param gameId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTurnOrder(gameId: string, body: UpdateTurnOrderRequestBody, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public updateTurnOrder(gameId: string, body: UpdateTurnOrderRequestBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public updateTurnOrder(gameId: string, body: UpdateTurnOrderRequestBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public updateTurnOrder(gameId: string, body: UpdateTurnOrderRequestBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling updateTurnOrder.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateTurnOrder.');
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Game>(`${this.basePath}/game/${encodeURIComponent(String(gameId))}/updateTurnOrder`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
